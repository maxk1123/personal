import pandas as pd
import numpy as np
from scipy.optimize import minimize

# Step 1: Load the CSV files for each stock
tickers = ['AAPL', 'AMZN', 'GOOGL', 'META', 'MSFT', 'NVDA', 'TSLA']
data = {}

# Assuming CSV files are named as AAPL.csv, AMZN.csv, etc.
for ticker in tickers:
    data[ticker] = pd.read_csv(f'{ticker}.csv', index_col='Date', parse_dates=True)

# Step 2: Concatenate 'Close' prices from each DataFrame
close_prices = pd.DataFrame({ticker: data[ticker]['Close'] for ticker in tickers})

# Step 3: Calculate daily returns
returns = close_prices.pct_change().dropna()

# Step 4: Annualize the mean returns and covariance matrix
mean_returns = returns.mean() * 252  # Multiply by 252 to annualize
cov_matrix = returns.cov() * 252  # Annualize the covariance matrix as well

# Step 5: Portfolio performance function adjusted for annual returns
def portfolio_performance(weights, mean_returns, cov_matrix):
    """
    Function to calculate annualized portfolio performance (return and volatility)
    """
    portfolio_return = np.dot(weights, mean_returns)
    portfolio_volatility = np.sqrt(np.dot(weights.T, np.dot(cov_matrix, weights)))
    return portfolio_return, portfolio_volatility

def minimize_volatility(weights, mean_returns, cov_matrix, target_return):
    """
    Minimize the volatility for a given target return (annualized)
    """
    portfolio_return, portfolio_volatility = portfolio_performance(weights, mean_returns, cov_matrix)
    
    # Add penalty if portfolio return deviates from the target return
    if portfolio_return < target_return:
        return np.inf  # Penalize if return is less than the target
    return portfolio_volatility  # Minimize volatility otherwise

# Step 6: Define constraints and bounds
def get_portfolio_optimization(mean_returns, cov_matrix, target_return):
    num_assets = len(mean_returns)
    args = (mean_returns, cov_matrix, target_return)
    
    # Constraints: Sum of weights must be 1, and portfolio return must equal target return
    constraints = ({'type': 'eq', 'fun': lambda weights: np.sum(weights) - 1},  # Fully invested portfolio
                   {'type': 'eq', 'fun': lambda weights: portfolio_performance(weights, mean_returns, cov_matrix)[0] - target_return})  # Target return
    
    # Bounds for weights (between 0 and 1)
    bounds = tuple((0, 1) for asset in range(num_assets))
    
    # Initial guess (equal weighting)
    initial_weights = num_assets * [1. / num_assets,]
    
    # Minimize portfolio volatility
    optimized_result = minimize(minimize_volatility, initial_weights, args=args, method='SLSQP', bounds=bounds, constraints=constraints)
    
    return optimized_result

# Step 7: Optimize portfolio for an annual target return (example: 10% annual return)
target_annual_return = 0.10  # Example target: 10% annual return
optimal_portfolio = get_portfolio_optimization(mean_returns, cov_matrix, target_annual_return)

# Step 8: Print the optimized weights and portfolio performance
optimal_weights = optimal_portfolio.x
portfolio_return, portfolio_volatility = portfolio_performance(optimal_weights, mean_returns, cov_matrix)

print(f"Optimized Weights: {optimal_weights}")
print(f"Expected Portfolio Return (Annual): {portfolio_return}")
print(f"Expected Portfolio Volatility (Annual): {portfolio_volatility}")